'''
Series in Pandas is a one-dimensional array, like a column in a table. It is a labeled array that can hold data of any type. The Series() method is used for this and has the following parameters:

data: The data to be stored in the Pandas Series
index: The index values should have the same length as the data.
dtype: It is the datatype for the output Series.
name: Set the series name with the name parameter
copy: To copy the input data
'''


#01
#Create a Pandas Series

import pandas as pd
data=[10,24,56,45,64,90]
result=pd.Series(data)
print(result)

#02
#Access a value from a Pandas Series
#Set the index of the value you want to display inside []:

import pandas as pd
data=[10,24,56,45,64,90]
result=pd.Series(data)
#print(result)
print( "\n\nserach a index value:",result[2])
print( "\n\nserach a index value:",result[0])


#03
#Name your own(custom) indexes in a Pandas Series
import pandas as pd
data=[10,24,56,45,64,90]
result=pd.Series(data,index=["r0","r1","r2","r3","r4","r5"])
print(result)

#04
#Access a value from a Pandas Series with labels
import pandas as pd
data=[10,24,56,45,64,90]
result=pd.Series(data,index=["r0","r1","r2","r3","r4","r5"])
print(result["r3"])
'''
Pandas Series â€“ Attributes and Methods

dtype: Return the dtype.
ndim: Return the Number of dimensions
size: Return the number of elements.
name: Return the name of the Series.
hasnans: Returns True if NaNs are in the series.
index: The index of the series
head(): Return the first n rows.
tail(): Return the last n rows.
info(): Display the Summary of the series
'''

#05
#dtype: Return the dtype.

import pandas as pd
data=[10,24,56,45,64,90]
result=pd.Series(data)
print(result.dtype)

#06
#ndim: Return the Number of dimensions
import pandas as pd
data=[10,24,56,45,64,90]
result=pd.Series(data)
print(result.ndim)


#07
#size: Return the number of elements.
import pandas as pd
data=[10,24,56,45,64,90]#6
result=pd.Series(data)
print(result.size)

#08

#name: Return the name of the Series.

import pandas as pd
data=[10,24,56,45,64,90]
result=pd.Series(data,name="my number serics:")
print(result)
print(result.name)


#09
#hasnans: Returns True if NaNs are in the series.
import numpy as np
import pandas as pd
data=[10,24,56,45,64,90, np.nan]
result=pd.Series(data,name="my number serics:")
print(result)
print(result.hasnans)


#10
#index: The index of the series
import pandas as pd
data=[10,24,56,45,64,90]
result=pd.Series(data,index=["r0","r1","r2","r3","r4","r5"])
print(result.index)

#11
#head(): Return the first n rows.

import pandas as pd
data=[10,24,56,45,64,90,45,66,88]
result=pd.Series(data)
print(result.head())

#12
#tail(): Return the last n rows.
import pandas as pd
data=[10,24,56,45,64,90,45,66,88]
result=pd.Series(data)
print("\n\n",result.tail())


#13
#info(): Display the Summary of the series
import pandas as pd
data=[10,24,56,45,64,90]
result=pd.Series(data,index=["r0","r1","r2","r3","r4","r5"])
print(result.info())




#Append two Pandas Series


#14
#Append two Pandas series considering the original index
'''
import pandas as pd
data1 = [10, 20, 40, 80, 100]
data2 = [150, 200]
series1 = pd.Series(data1, index = ["RowA", "RowB", "RowC", "RowD", "RowE"])
series2 = pd.Series(data2, index = ["RowF", "RowG"])
result = series1.append(series2,ignore_index = True)
print(result)
'''
#To append two pandas Series objects, you can use pd.concat(), as append() is deprecated.
import pandas as pd

# Sample data
data1 = [10, 20, 30]
data2 = [40, 50]

# Create Series
series1 = pd.Series(data1, index=["A", "B", "C"])
series2 = pd.Series(data2, index=["D", "E"])

# Append using concat
result = pd.concat([series1, series2])

print(result)


#15
#append new catagory


import pandas as pd
s=pd.Series(["a","d","e"],dtype="category")
#append a catagory
s=s.cat.add_categories("t")
print(s)


#16
#remove categories

import pandas as pd
s=pd.Series(["a","d","e"],dtype="category")
#append a catagory
s=s.cat.remove_categories("a")
print(s)
